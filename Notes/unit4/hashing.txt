HASHING

- large keys are converted to small keys by hashing functions
- the values are stored in ds called hash table
- key value pairs
- each element is assignes a key
- with that key, access the element in O(1) time

> Implementation
- element -> integer using hash function and the element is used as an index to store the original element, which falls on hash table
- quickly retrievable using hashed key
- hash = hashfunc(key) index = hash%array_size

> Hash Table
- the ht store element in key-value pairs
- Key - unique integer that is used for indexing the values
- Value - data that are associated with keys

> Hash Collision
- when hash function generates the same index for multiple keys, there is conflict. It is called hash Collision
- x1 and x2 are two different keys then it is possible that h(x1) = h(x2)

>> Collision Avoidance
- collision resolution is the important issue when implementing hash table

> Linear Probing
- collision is resolved by checking the next slot
- h(k, i) = (h`(k) + i) mod m
- where i = {0, 1, .....}
- h`(k) is new hashing function
- m is the size of ht 

> Quadratic Probing
- interval b/w probes will increase proportionally to hash value
- also called mid-square method to solve clustering
- startint from the orignal hash, we check the i^2th slot in each ith iteration
- only if location is occupied we check other slots
- h(k, i) = (h`(k)+i^2) mod m

> Double Hashing
- It uses a secondary hash function to determine the step size for probing when a collision occurs.
- h(k,i)=(h1(k)+iâ‹…h2(k))modm
- When inserting a key into a hash table, double hashing calculates two hash values:
    -> h1(k): The primary hash function that determines the initial index.
    -> h2(k): The secondary hash function that determines how far to jump for the next index if a collision occurs.
- more uniform distribution of keys